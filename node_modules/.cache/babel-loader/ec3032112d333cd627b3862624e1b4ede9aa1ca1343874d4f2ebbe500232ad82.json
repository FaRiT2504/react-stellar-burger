{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project\\\\react-stellar-burger\\\\src\\\\components\\\\burger-ingredients\\\\burger-ingredients.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport BurgerTab from './burger-tab/burger-tab';\nimport styles from './burger-ingredients.module.css';\nimport BurgerCard from './burger-card/burger-card';\nimport BurgerSection from './burger-section/burger-section';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ingredientsDataSelector } from \"../../services/selectors/ingredients-selector\";\nimport Modal from \"../modal/modal\";\nimport IngredientDetails from '../modal/ingredient-details/ingredient-details';\nimport { modalOpenSelector, isVisibleModalSelector, closeModalSelector } from \"../../services/selectors/modal-selector\";\nimport { getIngredients } from \"../../services/actions/ingredients-action\";\nimport { orderSuccess } from \"../../services/actions/order-actions\";\nimport { openModalAction } from \"../../services/actions/modal-action\";\nimport { setCurrentItem } from \"../../services/actions/current-ingredient-action\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BurgerIngredients(_ref) {\n  _s();\n  let {\n    /*data,*/ /*cardOnClick,*/count\n  } = _ref;\n  const dispatch = useDispatch();\n  // const modal = useSelector(\n  //   modalOpenSelector\n  // );\n  const isVisibleModal = useSelector(isVisibleModalSelector);\n  const [current, setCurrent] = React.useState(\"bun\");\n  const [modalData, setModalData] = React.useState(null);\n  const [modal, setModal] = useState(false);\n  const handleButtonClick = currentTab => {\n    setCurrent(currentTab);\n    const element = document.getElementById(currentTab);\n    if (element) {\n      element.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n  };\n\n  // const ingredients = useSelector(burgerIngredientsSelector);\n  const ingredients = useSelector(ingredientsDataSelector);\n  React.useEffect(() => {\n    dispatch(getIngredients());\n  }, [dispatch]);\n  const cardClick = React.useCallback(item => {\n    return () => {\n      // setModalData(item);\n      // dispatch(setCurrentItem(item));\n      dispatch(openModalAction(\"ingredient\"));\n      setModal(true);\n      // dispatch(orderSuccess(\"ingredient\"));\n\n      // openModal();\n    };\n  }, []);\n  const cardClose = () => {\n    setModal(false);\n    dispatch({\n      type: CLEAR_CURRENT_INGREDIENT\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${styles.container} pt-10`,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text text_type_main-large mb-5\",\n      children: \"\\u0421\\u043E\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0431\\u0443\\u0440\\u0433\\u0435\\u0440\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BurgerTab, {\n      current: current,\n      setCurrent: setCurrent,\n      handleButtonClick: handleButtonClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${styles.containerScroll} custom-scroll`,\n      children: [/*#__PURE__*/_jsxDEV(BurgerSection, {\n        title: \"Булки\",\n        id: \"bun\",\n        children: ingredients.map(function (item) {\n          if (item.type === \"bun\") {\n            return /*#__PURE__*/_jsxDEV(BurgerCard, {\n              onClick: cardClick(item),\n              dataCard: item,\n              count: count\n            }, item._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 23\n            }, this);\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BurgerSection, {\n        title: \"Соусы\",\n        id: \"sauce\",\n        children: ingredients.map(function (item) {\n          if (item.type === \"sauce\") {\n            return /*#__PURE__*/_jsxDEV(BurgerCard, {\n              onClick: cardClick(item),\n              dataCard: item,\n              count: count\n            }, item._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 23\n            }, this);\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BurgerSection, {\n        title: \"Начинки\",\n        id: \"main\",\n        children: ingredients.map(function (item) {\n          if (item.type === \"main\") {\n            return /*#__PURE__*/_jsxDEV(BurgerCard, {\n              onClick: cardClick(item),\n              dataCard: item,\n              count: count\n            }, item._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 23\n            }, this);\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), modal && /*#__PURE__*/_jsxDEV(Modal, {\n      title: \"\\u0414\\u0435\\u0442\\u0430\\u043B\\u0438 \\u0438\\u043D\\u0433\\u0440\\u0435\\u0434\\u0438\\u0435\\u043D\\u0442\\u0430\",\n      isVisible: isVisibleModal,\n      onClose: cardClose,\n      children: /*#__PURE__*/_jsxDEV(IngredientDetails, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n_s(BurgerIngredients, \"u6rwgto/sGypRaH2uQhBiSBGGNY=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = BurgerIngredients;\nBurgerIngredients.propTypes = {\n  data: PropTypes.shape({\n    _id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    type: PropTypes.oneOf([\"bun\", \"main\", \"sauce\"]).isRequired,\n    proteins: PropTypes.number.isRequired,\n    fat: PropTypes.number.isRequired,\n    carbohydrates: PropTypes.number.isRequired,\n    calories: PropTypes.number.isRequired,\n    price: PropTypes.number.isRequired,\n    image: PropTypes.string.isRequired,\n    image_mobile: PropTypes.string.isRequired,\n    image_large: PropTypes.string.isRequired,\n    __v: PropTypes.number.isRequired\n  }),\n  cardOnClick: PropTypes.func.isRequired,\n  count: PropTypes.number\n};\nexport default BurgerIngredients;\n\n// const [isModalOpened, setIsModalOpened] = useState(false);\n\n// const handleOpenModal = () => {\n//   setIsModalOpened(true);\n// };\n\n// const handleCloseModal = () => {\n//   setIsModalOpened(false);\n// };\nvar _c;\n$RefreshReg$(_c, \"BurgerIngredients\");","map":{"version":3,"names":["React","useState","PropTypes","BurgerTab","styles","BurgerCard","BurgerSection","useDispatch","useSelector","ingredientsDataSelector","Modal","IngredientDetails","modalOpenSelector","isVisibleModalSelector","closeModalSelector","getIngredients","orderSuccess","openModalAction","setCurrentItem","jsxDEV","_jsxDEV","BurgerIngredients","_ref","_s","count","dispatch","isVisibleModal","current","setCurrent","modalData","setModalData","modal","setModal","handleButtonClick","currentTab","element","document","getElementById","scrollIntoView","behavior","ingredients","useEffect","cardClick","useCallback","item","cardClose","type","CLEAR_CURRENT_INGREDIENT","className","container","children","fileName","_jsxFileName","lineNumber","columnNumber","containerScroll","title","id","map","onClick","dataCard","_id","isVisible","onClose","_c","propTypes","data","shape","string","isRequired","name","oneOf","proteins","number","fat","carbohydrates","calories","price","image","image_mobile","image_large","__v","cardOnClick","func","$RefreshReg$"],"sources":["D:/Project/react-stellar-burger/src/components/burger-ingredients/burger-ingredients.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport BurgerTab from './burger-tab/burger-tab';\r\nimport styles from './burger-ingredients.module.css';\r\nimport BurgerCard from './burger-card/burger-card';\r\nimport BurgerSection from './burger-section/burger-section';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  ingredientsDataSelector\r\n} from \"../../services/selectors/ingredients-selector\";\r\nimport Modal from \"../modal/modal\";\r\nimport IngredientDetails from '../modal/ingredient-details/ingredient-details';\r\nimport {\r\n  modalOpenSelector, isVisibleModalSelector, closeModalSelector\r\n} from \"../../services/selectors/modal-selector\";\r\nimport { getIngredients } from \"../../services/actions/ingredients-action\";\r\nimport { orderSuccess } from \"../../services/actions/order-actions\";\r\nimport { openModalAction } from \"../../services/actions/modal-action\";\r\nimport { setCurrentItem } from \"../../services/actions/current-ingredient-action\";\r\n\r\n\r\nfunction BurgerIngredients({ /*data,*/ /*cardOnClick,*/ count }) {\r\n  const dispatch = useDispatch();\r\n  // const modal = useSelector(\r\n  //   modalOpenSelector\r\n  // );\r\n  const isVisibleModal = useSelector(\r\n    isVisibleModalSelector\r\n  );\r\n  const [current, setCurrent] = React.useState(\"bun\")\r\n  const [modalData, setModalData] = React.useState(null);\r\n  const [modal, setModal] = useState(false);\r\n  const handleButtonClick = (currentTab) => {\r\n    setCurrent(currentTab)\r\n    const element = document.getElementById(currentTab);\r\n    if (element) {\r\n      element.scrollIntoView({ behavior: \"smooth\" })\r\n    }\r\n  }\r\n\r\n  // const ingredients = useSelector(burgerIngredientsSelector);\r\n  const ingredients = useSelector(ingredientsDataSelector);\r\n  React.useEffect(() => {\r\n    dispatch(getIngredients());\r\n  }, [dispatch]);\r\n\r\n  const cardClick = React.useCallback(\r\n    (item) => {\r\n      return () => {\r\n        // setModalData(item);\r\n        // dispatch(setCurrentItem(item));\r\n        dispatch(openModalAction(\"ingredient\"));\r\n        setModal(true);\r\n        // dispatch(orderSuccess(\"ingredient\"));\r\n\r\n        // openModal();\r\n      };\r\n    },\r\n    []\r\n  );\r\n\r\n\r\n  const cardClose = () => {\r\n    setModal(false);\r\n    dispatch({\r\n      type: CLEAR_CURRENT_INGREDIENT,\r\n    });\r\n  };\r\n\r\n  return (\r\n\r\n    <div className={`${styles.container} pt-10`} >\r\n      <h1 className=\"text text_type_main-large mb-5\" >Соберите бургер</h1>\r\n      <BurgerTab current={current} setCurrent={setCurrent} handleButtonClick={handleButtonClick} />\r\n      <div className={`${styles.containerScroll} custom-scroll`}>\r\n\r\n        <BurgerSection title={\"Булки\"} id={\"bun\"}>\r\n          {ingredients.map(function (item) {\r\n            if (item.type === \"bun\") {\r\n              return (<BurgerCard key={item._id} onClick={cardClick(item)}\r\n                dataCard={item}\r\n                count={count}\r\n              />)\r\n            }\r\n          })}\r\n\r\n        </BurgerSection>\r\n\r\n        <BurgerSection title={\"Соусы\"} id={\"sauce\"}>\r\n          {ingredients.map(function (item) {\r\n            if (item.type === \"sauce\") {\r\n              return (<BurgerCard key={item._id} onClick={cardClick(item)}\r\n                dataCard={item}\r\n                count={count}\r\n              />)\r\n            }\r\n          })}\r\n        </BurgerSection>\r\n\r\n        <BurgerSection title={\"Начинки\"} id={\"main\"}>\r\n          {ingredients.map(function (item) {\r\n            if (item.type === \"main\") {\r\n              return (<BurgerCard key={item._id} onClick={cardClick(item)}\r\n                dataCard={item}\r\n                count={count}\r\n              />)\r\n            }\r\n          })}\r\n        </BurgerSection >\r\n      </div>\r\n      {\r\n        modal &&\r\n        <Modal\r\n          title=\"Детали ингредиента\"\r\n          isVisible={isVisibleModal}\r\n          onClose={cardClose}\r\n        >\r\n          <IngredientDetails />\r\n\r\n        </Modal>\r\n\r\n      }\r\n    </div >\r\n\r\n  );\r\n}\r\n\r\nBurgerIngredients.propTypes = {\r\n  data: PropTypes.shape({\r\n    _id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    type: PropTypes.oneOf([\"bun\", \"main\", \"sauce\"]).isRequired,\r\n    proteins: PropTypes.number.isRequired,\r\n    fat: PropTypes.number.isRequired,\r\n    carbohydrates: PropTypes.number.isRequired,\r\n    calories: PropTypes.number.isRequired,\r\n    price: PropTypes.number.isRequired,\r\n    image: PropTypes.string.isRequired,\r\n    image_mobile: PropTypes.string.isRequired,\r\n    image_large: PropTypes.string.isRequired,\r\n    __v: PropTypes.number.isRequired,\r\n  }),\r\n  cardOnClick: PropTypes.func.isRequired,\r\n  count: PropTypes.number,\r\n};\r\n\r\nexport default BurgerIngredients;\r\n\r\n// const [isModalOpened, setIsModalOpened] = useState(false);\r\n\r\n// const handleOpenModal = () => {\r\n//   setIsModalOpened(true);\r\n// };\r\n\r\n// const handleCloseModal = () => {\r\n//   setIsModalOpened(false);\r\n// };\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}